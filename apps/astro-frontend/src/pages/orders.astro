---
import Layout from '../layouts/Layout.astro';
---

<Layout title="My Orders - Sandwich Delivery">
  <div class="max-w-4xl mx-auto">
    <h1 class="text-3xl font-bold text-gray-800 mb-8">📋 My Orders</h1>
    
    <div id="ordersContainer">
      <div class="text-center py-8">
        <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-orange-600 mx-auto"></div>
        <p class="text-gray-500 mt-4">Loading your orders...</p>
      </div>
    </div>
    
    <div id="emptyState" class="hidden text-center py-12">
      <div class="text-6xl mb-4">🛒</div>
      <h3 class="text-xl font-semibold text-gray-700 mb-2">No orders yet</h3>
      <p class="text-gray-500 mb-6">You haven't placed any orders yet. Ready to get started?</p>
      <a 
        href="/order" 
        class="bg-orange-600 text-white px-6 py-3 rounded-lg hover:bg-orange-700 transition-colors font-medium"
      >
        Order Now 🥪
      </a>
    </div>
  </div>
</Layout>

<script>
  import { api, type Order } from '../utils/api.ts';

  // Check if user is logged in
  if (!localStorage.getItem('token')) {
    window.location.href = '/login';
  }

  const ordersContainer = document.getElementById('ordersContainer') as HTMLDivElement;
  const emptyState = document.getElementById('emptyState') as HTMLDivElement;

  async function loadOrders() {
    try {
      const orders = await api.getUserOrders();
      
      if (orders.length === 0) {
        ordersContainer.classList.add('hidden');
        emptyState.classList.remove('hidden');
        return;
      }
      
      renderOrders(orders);
    } catch (error) {
      console.error('Failed to load orders:', error);
      ordersContainer.innerHTML = `
        <div class="bg-red-50 border border-red-200 rounded-lg p-6 text-center">
          <div class="text-red-600 text-lg mb-2">❌ Failed to load orders</div>
          <p class="text-red-500">Please try again later or contact support.</p>
        </div>
      `;
    }
  }

  function renderOrders(orders: Order[]) {
    ordersContainer.innerHTML = orders.map(order => `
      <div class="bg-white rounded-lg shadow-md p-6 mb-6">
        <div class="flex justify-between items-start mb-4">
          <div>
            <h3 class="text-lg font-semibold text-gray-800">
              Order #${order.id}
            </h3>
            <div class="text-sm text-gray-500 space-y-1">
              <div>📅 Ordered: ${formatDate(order.createdAt)}</div>
              ${order.paidAt ? `<div>💳 Paid: ${formatDate(order.paidAt)}</div>` : ''}
            </div>
          </div>
          <div class="text-right">
            <div class="text-2xl font-bold text-orange-600">${order.totalPrice.toFixed(2)}€</div>
            <span class="inline-block px-3 py-1 rounded-full text-sm font-medium ${getStatusStyle(order.status)}">
              ${getStatusText(order.status)}
            </span>
          </div>
        </div>
        
        <div class="border-t pt-4">
          <h4 class="font-medium text-gray-700 mb-3">Sandwiches:</h4>
          <div class="space-y-3">
            ${order.sandwiches.map((sandwich, index) => `
              <div class="flex justify-between items-center bg-gray-50 rounded-lg p-3">
                <div class="flex-1">
                  <div class="font-medium">
                    ${sandwich.type === 'HAM' ? '🥓 Ham' : '🥬 Vegetarian'} Sandwich
                  </div>
                  ${sandwich.toppingIds.length > 0 ? `
                    <div class="text-sm text-gray-600 mt-1">
                      Toppings: ${getToppingsText(sandwich.toppingIds)}
                    </div>
                  ` : ''}
                </div>
                <div class="text-orange-600 font-semibold">
                  ${sandwich.totalPrice.toFixed(2)}€
                </div>
              </div>
            `).join('')}
          </div>
        </div>
        
        ${order.status === 'PAID' ? `
          <div class="mt-4 bg-green-50 border border-green-200 rounded-lg p-4">
            <div class="flex items-center text-green-700">
              <span class="text-lg mr-2">🚚</span>
              <span class="font-medium">Your order is being prepared and will be delivered soon!</span>
            </div>
          </div>
        ` : ''}
      </div>
    `).join('');
  }

  function formatDate(dateString: string): string {
    const date = new Date(dateString);
    return date.toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  }

  function getStatusStyle(status: string): string {
    switch (status) {
      case 'BASKET':
        return 'bg-gray-100 text-gray-700';
      case 'PAID':
        return 'bg-green-100 text-green-700';
      case 'DELIVERED':
        return 'bg-blue-100 text-blue-700';
      default:
        return 'bg-gray-100 text-gray-700';
    }
  }

  function getStatusText(status: string): string {
    switch (status) {
      case 'BASKET':
        return '🛒 In Basket';
      case 'PAID':
        return '✅ Paid & Processing';
      case 'DELIVERED':
        return '🚚 Delivered';
      default:
        return status;
    }
  }

  function getToppingsText(toppingIds: number[]): string {
    // Group toppings by ID and count them
    const toppingCounts: Record<number, number> = {};
    toppingIds.forEach(id => {
      toppingCounts[id] = (toppingCounts[id] || 0) + 1;
    });

    // Map to names (we'll use the IDs for now, could fetch topping names)
    const toppingNames: Record<number, string> = {
      1: 'Salad',
      2: 'Tomato', 
      3: 'Onion',
      4: 'Cheese'
    };

    return Object.entries(toppingCounts)
      .map(([id, count]) => {
        const name = toppingNames[parseInt(id)] || `Topping ${id}`;
        return count > 1 ? `${name} (x${count})` : name;
      })
      .join(', ');
  }

  // Load orders on page load
  loadOrders();
</script>